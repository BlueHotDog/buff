{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48],"program":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/toolchains/1.35.0-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","strsim","/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=a00a26557cc1dc87","-C","extra-filename=-a00a26557cc1dc87","--out-dir","/Users/dmitrifriedland/dev/puff/puffcli/target/rls/debug/deps","-L","dependency=/Users/dmitrifriedland/dev/puff/puffcli/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/toolchains/1.35.0-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,100,101,118,47,112,117,102,102,47,112,117,102,102,99,108,105,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,115,116,114,115,105,109,45,97,48,48,97,50,54,53,53,55,99,99,49,100,99,56,55,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"strsim","disambiguator":[10427225848531118093,9413791092407147432]},"crate_root":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src","external_crates":[{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16127014926937644840,10617917418627549874]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16744842085366098991,10021575423373849340]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12219308825194572396,1593244597194478439]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7720465312014950334,11982745657479504049]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11777904974825780541,8937117351976831060]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15945735692096346127,1348883009948969371]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10033866232596031485,2828804971217722296]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[3105781163621059830,14714552640967562592]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[16569648819360698606,17003220646964807291]}},{"file_name":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[2023344073335283670,3652609272169039894]}}],"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21752,"line_start":1,"line_end":786,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21752,"line_start":1,"line_end":786,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/dmitrifriedland/.asdf/installs/rust/1.35.0/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":14},{"krate":0,"index":34},{"krate":0,"index":40},{"krate":0,"index":36},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":" This library implements string similarity metrics.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":184,"byte_end":203,"line_start":9,"line_end":9,"column_start":5,"column_end":24},"name":"DifferentLengthArgs","qualname":"::StrSimError::DifferentLengthArgs","value":"StrSimError::DifferentLengthArgs","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":166,"byte_end":177,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"StrSimError","qualname":"::StrSimError","value":"StrSimError::{DifferentLengthArgs}","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":216,"byte_end":229,"line_start":12,"line_end":12,"column_start":10,"column_end":23},"name":"HammingResult","qualname":"::HammingResult","value":"Result<usize, StrSimError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":601,"byte_end":608,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"hamming","qualname":"::hamming","value":"fn (a: &str, b: &str) -> HammingResult","parent":null,"children":[],"decl_id":null,"docs":" Calculates the number of positions in the two strings where the characters\n differ. Returns an error if the strings have different lengths.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1240,"byte_end":1244,"line_start":45,"line_end":45,"column_start":8,"column_end":12},"name":"jaro","qualname":"::jaro","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro similarity between two strings. The returned value\n is between 0.0 and 1.0 (higher value means more similar).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3070,"byte_end":3082,"line_start":116,"line_end":116,"column_start":8,"column_end":20},"name":"jaro_winkler","qualname":"::jaro_winkler","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Like Jaro but gives a boost to strings that have a common prefix.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3838,"byte_end":3849,"line_start":143,"line_end":143,"column_start":8,"column_end":19},"name":"levenshtein","qualname":"::levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the minimum number of insertions, deletions, and substitutions\n required to change one string into the other.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5180,"byte_end":5202,"line_start":186,"line_end":186,"column_start":8,"column_end":30},"name":"normalized_levenshtein","qualname":"::normalized_levenshtein","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n 1.0 (inclusive), where 1.0 means the strings are the same.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5598,"byte_end":5610,"line_start":201,"line_end":201,"column_start":8,"column_end":20},"name":"osa_distance","qualname":"::osa_distance","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like Levenshtein but allows for adjacent transpositions. Each substring can\n only be edited once.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7404,"byte_end":7423,"line_start":255,"line_end":255,"column_start":8,"column_end":27},"name":"damerau_levenshtein","qualname":"::damerau_levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like optimal string alignment, but substrings can be edited an unlimited\n number of times, and the triangle inequality holds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,100,109,105,116,114,105,102,114,105,101,100,108,97,110,100,47,46,97,115,100,102,47,105,110,115,116,97,108,108,115,47,114,117,115,116,47,49,46,51,53,46,48,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,116,114,115,105,109,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9837,"byte_end":9867,"line_start":329,"line_end":329,"column_start":8,"column_end":38},"name":"normalized_damerau_levenshtein","qualname":"::normalized_damerau_levenshtein","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates a normalized score of the Damerau–Levenshtein algorithm between\n 0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}